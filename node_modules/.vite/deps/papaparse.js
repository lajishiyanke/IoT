import {
  __commonJS
} from "./chunk-G3PMV62Z.js";

// node_modules/papaparse/papaparse.min.js
var require_papaparse_min = __commonJS({
  "node_modules/papaparse/papaparse.min.js"(exports, module) {
    !function(e, t) {
      "function" == typeof define && define.amd ? define([], t) : "object" == typeof module && "undefined" != typeof exports ? module.exports = t() : e.Papa = t();
    }(exports, function s() {
      "use strict";
      var f = "undefined" != typeof self ? self : "undefined" != typeof window ? window : void 0 !== f ? f : {};
      var n = !f.document && !!f.postMessage, d = f.IS_PAPA_WORKER || false, a = {}, o = 0, w = { parse: function(e, t) {
        var i2 = (t = t || {}).dynamicTyping || false;
        U(i2) && (t.dynamicTypingFunction = i2, i2 = {});
        if (t.dynamicTyping = i2, t.transform = !!U(t.transform) && t.transform, t.worker && w.WORKERS_SUPPORTED) {
          var r = function() {
            if (!w.WORKERS_SUPPORTED) return false;
            var e2 = (i3 = f.URL || f.webkitURL || null, r2 = s.toString(), w.BLOB_URL || (w.BLOB_URL = i3.createObjectURL(new Blob(["var global = (function() { if (typeof self !== 'undefined') { return self; } if (typeof window !== 'undefined') { return window; } if (typeof global !== 'undefined') { return global; } return {}; })(); global.IS_PAPA_WORKER=true; ", "(", r2, ")();"], { type: "text/javascript" })))), t2 = new f.Worker(e2);
            var i3, r2;
            return t2.onmessage = _, t2.id = o++, a[t2.id] = t2;
          }();
          return r.userStep = t.step, r.userChunk = t.chunk, r.userComplete = t.complete, r.userError = t.error, t.step = U(t.step), t.chunk = U(t.chunk), t.complete = U(t.complete), t.error = U(t.error), delete t.worker, void r.postMessage({ input: e, config: t, workerId: r.id });
        }
        var n2 = null;
        w.NODE_STREAM_INPUT, "string" == typeof e ? (e = function(e2) {
          if (65279 === e2.charCodeAt(0)) return e2.slice(1);
          return e2;
        }(e), n2 = t.download ? new u(t) : new p(t)) : true === e.readable && U(e.read) && U(e.on) ? n2 = new g(t) : (f.File && e instanceof File || e instanceof Object) && (n2 = new c(t));
        return n2.stream(e);
      }, unparse: function(e, t) {
        var n2 = false, _2 = true, m2 = ",", y2 = "\r\n", s2 = '"', a2 = s2 + s2, i2 = false, r = null, o2 = false;
        !function() {
          if ("object" != typeof t) return;
          "string" != typeof t.delimiter || w.BAD_DELIMITERS.filter(function(e2) {
            return -1 !== t.delimiter.indexOf(e2);
          }).length || (m2 = t.delimiter);
          ("boolean" == typeof t.quotes || "function" == typeof t.quotes || Array.isArray(t.quotes)) && (n2 = t.quotes);
          "boolean" != typeof t.skipEmptyLines && "string" != typeof t.skipEmptyLines || (i2 = t.skipEmptyLines);
          "string" == typeof t.newline && (y2 = t.newline);
          "string" == typeof t.quoteChar && (s2 = t.quoteChar);
          "boolean" == typeof t.header && (_2 = t.header);
          if (Array.isArray(t.columns)) {
            if (0 === t.columns.length) throw new Error("Option columns is empty");
            r = t.columns;
          }
          void 0 !== t.escapeChar && (a2 = t.escapeChar + s2);
          t.escapeFormulae instanceof RegExp ? o2 = t.escapeFormulae : "boolean" == typeof t.escapeFormulae && t.escapeFormulae && (o2 = /^[=+\-@\t\r].*$/);
        }();
        var h2 = new RegExp(P(s2), "g");
        "string" == typeof e && (e = JSON.parse(e));
        if (Array.isArray(e)) {
          if (!e.length || Array.isArray(e[0])) return u2(null, e, i2);
          if ("object" == typeof e[0]) return u2(r || Object.keys(e[0]), e, i2);
        } else if ("object" == typeof e) return "string" == typeof e.data && (e.data = JSON.parse(e.data)), Array.isArray(e.data) && (e.fields || (e.fields = e.meta && e.meta.fields || r), e.fields || (e.fields = Array.isArray(e.data[0]) ? e.fields : "object" == typeof e.data[0] ? Object.keys(e.data[0]) : []), Array.isArray(e.data[0]) || "object" == typeof e.data[0] || (e.data = [e.data])), u2(e.fields || [], e.data || [], i2);
        throw new Error("Unable to serialize unrecognized input");
        function u2(e2, t2, i3) {
          var r2 = "";
          "string" == typeof e2 && (e2 = JSON.parse(e2)), "string" == typeof t2 && (t2 = JSON.parse(t2));
          var n3 = Array.isArray(e2) && 0 < e2.length, s3 = !Array.isArray(t2[0]);
          if (n3 && _2) {
            for (var a3 = 0; a3 < e2.length; a3++) 0 < a3 && (r2 += m2), r2 += v2(e2[a3], a3);
            0 < t2.length && (r2 += y2);
          }
          for (var o3 = 0; o3 < t2.length; o3++) {
            var h3 = n3 ? e2.length : t2[o3].length, u3 = false, f2 = n3 ? 0 === Object.keys(t2[o3]).length : 0 === t2[o3].length;
            if (i3 && !n3 && (u3 = "greedy" === i3 ? "" === t2[o3].join("").trim() : 1 === t2[o3].length && 0 === t2[o3][0].length), "greedy" === i3 && n3) {
              for (var d2 = [], l2 = 0; l2 < h3; l2++) {
                var c2 = s3 ? e2[l2] : l2;
                d2.push(t2[o3][c2]);
              }
              u3 = "" === d2.join("").trim();
            }
            if (!u3) {
              for (var p2 = 0; p2 < h3; p2++) {
                0 < p2 && !f2 && (r2 += m2);
                var g2 = n3 && s3 ? e2[p2] : p2;
                r2 += v2(t2[o3][g2], p2);
              }
              o3 < t2.length - 1 && (!i3 || 0 < h3 && !f2) && (r2 += y2);
            }
          }
          return r2;
        }
        function v2(e2, t2) {
          if (null == e2) return "";
          if (e2.constructor === Date) return JSON.stringify(e2).slice(1, 25);
          var i3 = false;
          o2 && "string" == typeof e2 && o2.test(e2) && (e2 = "'" + e2, i3 = true);
          var r2 = e2.toString().replace(h2, a2);
          return (i3 = i3 || true === n2 || "function" == typeof n2 && n2(e2, t2) || Array.isArray(n2) && n2[t2] || function(e3, t3) {
            for (var i4 = 0; i4 < t3.length; i4++) if (-1 < e3.indexOf(t3[i4])) return true;
            return false;
          }(r2, w.BAD_DELIMITERS) || -1 < r2.indexOf(m2) || " " === r2.charAt(0) || " " === r2.charAt(r2.length - 1)) ? s2 + r2 + s2 : r2;
        }
      } };
      if (w.RECORD_SEP = String.fromCharCode(30), w.UNIT_SEP = String.fromCharCode(31), w.BYTE_ORDER_MARK = "\uFEFF", w.BAD_DELIMITERS = ["\r", "\n", '"', w.BYTE_ORDER_MARK], w.WORKERS_SUPPORTED = !n && !!f.Worker, w.NODE_STREAM_INPUT = 1, w.LocalChunkSize = 10485760, w.RemoteChunkSize = 5242880, w.DefaultDelimiter = ",", w.Parser = E, w.ParserHandle = i, w.NetworkStreamer = u, w.FileStreamer = c, w.StringStreamer = p, w.ReadableStreamStreamer = g, f.jQuery) {
        var l = f.jQuery;
        l.fn.parse = function(o2) {
          var i2 = o2.config || {}, h2 = [];
          return this.each(function(e2) {
            if (!("INPUT" === l(this).prop("tagName").toUpperCase() && "file" === l(this).attr("type").toLowerCase() && f.FileReader) || !this.files || 0 === this.files.length) return true;
            for (var t = 0; t < this.files.length; t++) h2.push({ file: this.files[t], inputElem: this, instanceConfig: l.extend({}, i2) });
          }), e(), this;
          function e() {
            if (0 !== h2.length) {
              var e2, t, i3, r, n2 = h2[0];
              if (U(o2.before)) {
                var s2 = o2.before(n2.file, n2.inputElem);
                if ("object" == typeof s2) {
                  if ("abort" === s2.action) return e2 = "AbortError", t = n2.file, i3 = n2.inputElem, r = s2.reason, void (U(o2.error) && o2.error({ name: e2 }, t, i3, r));
                  if ("skip" === s2.action) return void u2();
                  "object" == typeof s2.config && (n2.instanceConfig = l.extend(n2.instanceConfig, s2.config));
                } else if ("skip" === s2) return void u2();
              }
              var a2 = n2.instanceConfig.complete;
              n2.instanceConfig.complete = function(e3) {
                U(a2) && a2(e3, n2.file, n2.inputElem), u2();
              }, w.parse(n2.file, n2.instanceConfig);
            } else U(o2.complete) && o2.complete();
          }
          function u2() {
            h2.splice(0, 1), e();
          }
        };
      }
      function h(e) {
        this._handle = null, this._finished = false, this._completed = false, this._halted = false, this._input = null, this._baseIndex = 0, this._partialLine = "", this._rowCount = 0, this._start = 0, this._nextChunk = null, this.isFirstChunk = true, this._completeResults = { data: [], errors: [], meta: {} }, (function(e2) {
          var t = b(e2);
          t.chunkSize = parseInt(t.chunkSize), e2.step || e2.chunk || (t.chunkSize = null);
          this._handle = new i(t), (this._handle.streamer = this)._config = t;
        }).call(this, e), this.parseChunk = function(e2, t) {
          var i2 = parseInt(this._config.skipFirstNLines) || 0;
          if (this.isFirstChunk && 0 < i2) {
            var r = this._config.newline;
            if (!r) {
              var n2 = this._config.quoteChar || '"';
              r = this._handle.guessLineEndings(e2, n2);
            }
            e2 = e2.split(r).slice(i2).join(r);
          }
          if (this.isFirstChunk && U(this._config.beforeFirstChunk)) {
            var s2 = this._config.beforeFirstChunk(e2);
            void 0 !== s2 && (e2 = s2);
          }
          this.isFirstChunk = false, this._halted = false;
          var a2 = this._partialLine + e2;
          this._partialLine = "";
          var o2 = this._handle.parse(a2, this._baseIndex, !this._finished);
          if (!this._handle.paused() && !this._handle.aborted()) {
            var h2 = o2.meta.cursor;
            this._finished || (this._partialLine = a2.substring(h2 - this._baseIndex), this._baseIndex = h2), o2 && o2.data && (this._rowCount += o2.data.length);
            var u2 = this._finished || this._config.preview && this._rowCount >= this._config.preview;
            if (d) f.postMessage({ results: o2, workerId: w.WORKER_ID, finished: u2 });
            else if (U(this._config.chunk) && !t) {
              if (this._config.chunk(o2, this._handle), this._handle.paused() || this._handle.aborted()) return void (this._halted = true);
              o2 = void 0, this._completeResults = void 0;
            }
            return this._config.step || this._config.chunk || (this._completeResults.data = this._completeResults.data.concat(o2.data), this._completeResults.errors = this._completeResults.errors.concat(o2.errors), this._completeResults.meta = o2.meta), this._completed || !u2 || !U(this._config.complete) || o2 && o2.meta.aborted || (this._config.complete(this._completeResults, this._input), this._completed = true), u2 || o2 && o2.meta.paused || this._nextChunk(), o2;
          }
          this._halted = true;
        }, this._sendError = function(e2) {
          U(this._config.error) ? this._config.error(e2) : d && this._config.error && f.postMessage({ workerId: w.WORKER_ID, error: e2, finished: false });
        };
      }
      function u(e) {
        var r;
        (e = e || {}).chunkSize || (e.chunkSize = w.RemoteChunkSize), h.call(this, e), this._nextChunk = n ? function() {
          this._readChunk(), this._chunkLoaded();
        } : function() {
          this._readChunk();
        }, this.stream = function(e2) {
          this._input = e2, this._nextChunk();
        }, this._readChunk = function() {
          if (this._finished) this._chunkLoaded();
          else {
            if (r = new XMLHttpRequest(), this._config.withCredentials && (r.withCredentials = this._config.withCredentials), n || (r.onload = v(this._chunkLoaded, this), r.onerror = v(this._chunkError, this)), r.open(this._config.downloadRequestBody ? "POST" : "GET", this._input, !n), this._config.downloadRequestHeaders) {
              var e2 = this._config.downloadRequestHeaders;
              for (var t in e2) r.setRequestHeader(t, e2[t]);
            }
            if (this._config.chunkSize) {
              var i2 = this._start + this._config.chunkSize - 1;
              r.setRequestHeader("Range", "bytes=" + this._start + "-" + i2);
            }
            try {
              r.send(this._config.downloadRequestBody);
            } catch (e3) {
              this._chunkError(e3.message);
            }
            n && 0 === r.status && this._chunkError();
          }
        }, this._chunkLoaded = function() {
          4 === r.readyState && (r.status < 200 || 400 <= r.status ? this._chunkError() : (this._start += this._config.chunkSize ? this._config.chunkSize : r.responseText.length, this._finished = !this._config.chunkSize || this._start >= function(e2) {
            var t = e2.getResponseHeader("Content-Range");
            if (null === t) return -1;
            return parseInt(t.substring(t.lastIndexOf("/") + 1));
          }(r), this.parseChunk(r.responseText)));
        }, this._chunkError = function(e2) {
          var t = r.statusText || e2;
          this._sendError(new Error(t));
        };
      }
      function c(e) {
        var r, n2;
        (e = e || {}).chunkSize || (e.chunkSize = w.LocalChunkSize), h.call(this, e);
        var s2 = "undefined" != typeof FileReader;
        this.stream = function(e2) {
          this._input = e2, n2 = e2.slice || e2.webkitSlice || e2.mozSlice, s2 ? ((r = new FileReader()).onload = v(this._chunkLoaded, this), r.onerror = v(this._chunkError, this)) : r = new FileReaderSync(), this._nextChunk();
        }, this._nextChunk = function() {
          this._finished || this._config.preview && !(this._rowCount < this._config.preview) || this._readChunk();
        }, this._readChunk = function() {
          var e2 = this._input;
          if (this._config.chunkSize) {
            var t = Math.min(this._start + this._config.chunkSize, this._input.size);
            e2 = n2.call(e2, this._start, t);
          }
          var i2 = r.readAsText(e2, this._config.encoding);
          s2 || this._chunkLoaded({ target: { result: i2 } });
        }, this._chunkLoaded = function(e2) {
          this._start += this._config.chunkSize, this._finished = !this._config.chunkSize || this._start >= this._input.size, this.parseChunk(e2.target.result);
        }, this._chunkError = function() {
          this._sendError(r.error);
        };
      }
      function p(e) {
        var i2;
        h.call(this, e = e || {}), this.stream = function(e2) {
          return i2 = e2, this._nextChunk();
        }, this._nextChunk = function() {
          if (!this._finished) {
            var e2, t = this._config.chunkSize;
            return t ? (e2 = i2.substring(0, t), i2 = i2.substring(t)) : (e2 = i2, i2 = ""), this._finished = !i2, this.parseChunk(e2);
          }
        };
      }
      function g(e) {
        h.call(this, e = e || {});
        var t = [], i2 = true, r = false;
        this.pause = function() {
          h.prototype.pause.apply(this, arguments), this._input.pause();
        }, this.resume = function() {
          h.prototype.resume.apply(this, arguments), this._input.resume();
        }, this.stream = function(e2) {
          this._input = e2, this._input.on("data", this._streamData), this._input.on("end", this._streamEnd), this._input.on("error", this._streamError);
        }, this._checkIsFinished = function() {
          r && 1 === t.length && (this._finished = true);
        }, this._nextChunk = function() {
          this._checkIsFinished(), t.length ? this.parseChunk(t.shift()) : i2 = true;
        }, this._streamData = v(function(e2) {
          try {
            t.push("string" == typeof e2 ? e2 : e2.toString(this._config.encoding)), i2 && (i2 = false, this._checkIsFinished(), this.parseChunk(t.shift()));
          } catch (e3) {
            this._streamError(e3);
          }
        }, this), this._streamError = v(function(e2) {
          this._streamCleanUp(), this._sendError(e2);
        }, this), this._streamEnd = v(function() {
          this._streamCleanUp(), r = true, this._streamData("");
        }, this), this._streamCleanUp = v(function() {
          this._input.removeListener("data", this._streamData), this._input.removeListener("end", this._streamEnd), this._input.removeListener("error", this._streamError);
        }, this);
      }
      function i(m2) {
        var a2, o2, h2, r = Math.pow(2, 53), n2 = -r, s2 = /^\s*-?(\d+\.?|\.\d+|\d+\.\d+)([eE][-+]?\d+)?\s*$/, u2 = /^((\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z)))$/, t = this, i2 = 0, f2 = 0, d2 = false, e = false, l2 = [], c2 = { data: [], errors: [], meta: {} };
        if (U(m2.step)) {
          var p2 = m2.step;
          m2.step = function(e2) {
            if (c2 = e2, _2()) g2();
            else {
              if (g2(), 0 === c2.data.length) return;
              i2 += e2.data.length, m2.preview && i2 > m2.preview ? o2.abort() : (c2.data = c2.data[0], p2(c2, t));
            }
          };
        }
        function y2(e2) {
          return "greedy" === m2.skipEmptyLines ? "" === e2.join("").trim() : 1 === e2.length && 0 === e2[0].length;
        }
        function g2() {
          return c2 && h2 && (k("Delimiter", "UndetectableDelimiter", "Unable to auto-detect delimiting character; defaulted to '" + w.DefaultDelimiter + "'"), h2 = false), m2.skipEmptyLines && (c2.data = c2.data.filter(function(e2) {
            return !y2(e2);
          })), _2() && function() {
            if (!c2) return;
            function e2(e3, t3) {
              U(m2.transformHeader) && (e3 = m2.transformHeader(e3, t3)), l2.push(e3);
            }
            if (Array.isArray(c2.data[0])) {
              for (var t2 = 0; _2() && t2 < c2.data.length; t2++) c2.data[t2].forEach(e2);
              c2.data.splice(0, 1);
            } else c2.data.forEach(e2);
          }(), function() {
            if (!c2 || !m2.header && !m2.dynamicTyping && !m2.transform) return c2;
            function e2(e3, t3) {
              var i3, r2 = m2.header ? {} : [];
              for (i3 = 0; i3 < e3.length; i3++) {
                var n3 = i3, s3 = e3[i3];
                m2.header && (n3 = i3 >= l2.length ? "__parsed_extra" : l2[i3]), m2.transform && (s3 = m2.transform(s3, n3)), s3 = v2(n3, s3), "__parsed_extra" === n3 ? (r2[n3] = r2[n3] || [], r2[n3].push(s3)) : r2[n3] = s3;
              }
              return m2.header && (i3 > l2.length ? k("FieldMismatch", "TooManyFields", "Too many fields: expected " + l2.length + " fields but parsed " + i3, f2 + t3) : i3 < l2.length && k("FieldMismatch", "TooFewFields", "Too few fields: expected " + l2.length + " fields but parsed " + i3, f2 + t3)), r2;
            }
            var t2 = 1;
            !c2.data.length || Array.isArray(c2.data[0]) ? (c2.data = c2.data.map(e2), t2 = c2.data.length) : c2.data = e2(c2.data, 0);
            m2.header && c2.meta && (c2.meta.fields = l2);
            return f2 += t2, c2;
          }();
        }
        function _2() {
          return m2.header && 0 === l2.length;
        }
        function v2(e2, t2) {
          return i3 = e2, m2.dynamicTypingFunction && void 0 === m2.dynamicTyping[i3] && (m2.dynamicTyping[i3] = m2.dynamicTypingFunction(i3)), true === (m2.dynamicTyping[i3] || m2.dynamicTyping) ? "true" === t2 || "TRUE" === t2 || "false" !== t2 && "FALSE" !== t2 && (function(e3) {
            if (s2.test(e3)) {
              var t3 = parseFloat(e3);
              if (n2 < t3 && t3 < r) return true;
            }
            return false;
          }(t2) ? parseFloat(t2) : u2.test(t2) ? new Date(t2) : "" === t2 ? null : t2) : t2;
          var i3;
        }
        function k(e2, t2, i3, r2) {
          var n3 = { type: e2, code: t2, message: i3 };
          void 0 !== r2 && (n3.row = r2), c2.errors.push(n3);
        }
        this.parse = function(e2, t2, i3) {
          var r2 = m2.quoteChar || '"';
          if (m2.newline || (m2.newline = this.guessLineEndings(e2, r2)), h2 = false, m2.delimiter) U(m2.delimiter) && (m2.delimiter = m2.delimiter(e2), c2.meta.delimiter = m2.delimiter);
          else {
            var n3 = function(e3, t3, i4, r3, n4) {
              var s4, a3, o3, h3;
              n4 = n4 || [",", "	", "|", ";", w.RECORD_SEP, w.UNIT_SEP];
              for (var u3 = 0; u3 < n4.length; u3++) {
                var f3 = n4[u3], d3 = 0, l3 = 0, c3 = 0;
                o3 = void 0;
                for (var p3 = new E({ comments: r3, delimiter: f3, newline: t3, preview: 10 }).parse(e3), g3 = 0; g3 < p3.data.length; g3++) if (i4 && y2(p3.data[g3])) c3++;
                else {
                  var _3 = p3.data[g3].length;
                  l3 += _3, void 0 !== o3 ? 0 < _3 && (d3 += Math.abs(_3 - o3), o3 = _3) : o3 = _3;
                }
                0 < p3.data.length && (l3 /= p3.data.length - c3), (void 0 === a3 || d3 <= a3) && (void 0 === h3 || h3 < l3) && 1.99 < l3 && (a3 = d3, s4 = f3, h3 = l3);
              }
              return { successful: !!(m2.delimiter = s4), bestDelimiter: s4 };
            }(e2, m2.newline, m2.skipEmptyLines, m2.comments, m2.delimitersToGuess);
            n3.successful ? m2.delimiter = n3.bestDelimiter : (h2 = true, m2.delimiter = w.DefaultDelimiter), c2.meta.delimiter = m2.delimiter;
          }
          var s3 = b(m2);
          return m2.preview && m2.header && s3.preview++, a2 = e2, o2 = new E(s3), c2 = o2.parse(a2, t2, i3), g2(), d2 ? { meta: { paused: true } } : c2 || { meta: { paused: false } };
        }, this.paused = function() {
          return d2;
        }, this.pause = function() {
          d2 = true, o2.abort(), a2 = U(m2.chunk) ? "" : a2.substring(o2.getCharIndex());
        }, this.resume = function() {
          t.streamer._halted ? (d2 = false, t.streamer.parseChunk(a2, true)) : setTimeout(t.resume, 3);
        }, this.aborted = function() {
          return e;
        }, this.abort = function() {
          e = true, o2.abort(), c2.meta.aborted = true, U(m2.complete) && m2.complete(c2), a2 = "";
        }, this.guessLineEndings = function(e2, t2) {
          e2 = e2.substring(0, 1048576);
          var i3 = new RegExp(P(t2) + "([^]*?)" + P(t2), "gm"), r2 = (e2 = e2.replace(i3, "")).split("\r"), n3 = e2.split("\n"), s3 = 1 < n3.length && n3[0].length < r2[0].length;
          if (1 === r2.length || s3) return "\n";
          for (var a3 = 0, o3 = 0; o3 < r2.length; o3++) "\n" === r2[o3][0] && a3++;
          return a3 >= r2.length / 2 ? "\r\n" : "\r";
        };
      }
      function P(e) {
        return e.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
      }
      function E(S) {
        var O, x = (S = S || {}).delimiter, I = S.newline, A = S.comments, T = S.step, D = S.preview, L = S.fastMode, F = null, j = O = void 0 === S.quoteChar || null === S.quoteChar ? '"' : S.quoteChar;
        if (void 0 !== S.escapeChar && (j = S.escapeChar), ("string" != typeof x || -1 < w.BAD_DELIMITERS.indexOf(x)) && (x = ","), A === x) throw new Error("Comment character same as delimiter");
        true === A ? A = "#" : ("string" != typeof A || -1 < w.BAD_DELIMITERS.indexOf(A)) && (A = false), "\n" !== I && "\r" !== I && "\r\n" !== I && (I = "\n");
        var z = 0, M = false;
        this.parse = function(r, u2, t) {
          if ("string" != typeof r) throw new Error("Input must be a string");
          var i2 = r.length, e = x.length, n2 = I.length, s2 = A.length, a2 = U(T), f2 = [], d2 = [], o2 = [], l2 = z = 0;
          if (!r) return C();
          if (L || false !== L && -1 === r.indexOf(O)) {
            for (var h2 = r.split(I), c2 = 0; c2 < h2.length; c2++) {
              if (o2 = h2[c2], z += o2.length, c2 !== h2.length - 1) z += I.length;
              else if (t) return C();
              if (!A || o2.substring(0, s2) !== A) {
                if (a2) {
                  if (f2 = [], k(o2.split(x)), R(), M) return C();
                } else k(o2.split(x));
                if (D && D <= c2) return f2 = f2.slice(0, D), C(true);
              }
            }
            return C();
          }
          for (var p2 = r.indexOf(x, z), g2 = r.indexOf(I, z), _2 = new RegExp(P(j) + P(O), "g"), m2 = r.indexOf(O, z); ; ) if (r[z] !== O) if (A && 0 === o2.length && r.substring(z, z + s2) === A) {
            if (-1 === g2) return C();
            z = g2 + n2, g2 = r.indexOf(I, z), p2 = r.indexOf(x, z);
          } else if (-1 !== p2 && (p2 < g2 || -1 === g2)) o2.push(r.substring(z, p2)), z = p2 + e, p2 = r.indexOf(x, z);
          else {
            if (-1 === g2) break;
            if (o2.push(r.substring(z, g2)), b2(g2 + n2), a2 && (R(), M)) return C();
            if (D && f2.length >= D) return C(true);
          }
          else for (m2 = z, z++; ; ) {
            if (-1 === (m2 = r.indexOf(O, m2 + 1))) return t || d2.push({ type: "Quotes", code: "MissingQuotes", message: "Quoted field unterminated", row: f2.length, index: z }), E2();
            if (m2 === i2 - 1) return E2(r.substring(z, m2).replace(_2, O));
            if (O !== j || r[m2 + 1] !== j) {
              if (O === j || 0 === m2 || r[m2 - 1] !== j) {
                -1 !== p2 && p2 < m2 + 1 && (p2 = r.indexOf(x, m2 + 1)), -1 !== g2 && g2 < m2 + 1 && (g2 = r.indexOf(I, m2 + 1));
                var y2 = w2(-1 === g2 ? p2 : Math.min(p2, g2));
                if (r.substr(m2 + 1 + y2, e) === x) {
                  o2.push(r.substring(z, m2).replace(_2, O)), r[z = m2 + 1 + y2 + e] !== O && (m2 = r.indexOf(O, z)), p2 = r.indexOf(x, z), g2 = r.indexOf(I, z);
                  break;
                }
                var v2 = w2(g2);
                if (r.substring(m2 + 1 + v2, m2 + 1 + v2 + n2) === I) {
                  if (o2.push(r.substring(z, m2).replace(_2, O)), b2(m2 + 1 + v2 + n2), p2 = r.indexOf(x, z), m2 = r.indexOf(O, z), a2 && (R(), M)) return C();
                  if (D && f2.length >= D) return C(true);
                  break;
                }
                d2.push({ type: "Quotes", code: "InvalidQuotes", message: "Trailing quote on quoted field is malformed", row: f2.length, index: z }), m2++;
              }
            } else m2++;
          }
          return E2();
          function k(e2) {
            f2.push(e2), l2 = z;
          }
          function w2(e2) {
            var t2 = 0;
            if (-1 !== e2) {
              var i3 = r.substring(m2 + 1, e2);
              i3 && "" === i3.trim() && (t2 = i3.length);
            }
            return t2;
          }
          function E2(e2) {
            return t || (void 0 === e2 && (e2 = r.substring(z)), o2.push(e2), z = i2, k(o2), a2 && R()), C();
          }
          function b2(e2) {
            z = e2, k(o2), o2 = [], g2 = r.indexOf(I, z);
          }
          function C(e2) {
            if (S.header && !u2 && f2.length) {
              for (var t2 = f2[0], i3 = {}, r2 = new Set(t2), n3 = false, s3 = 0; s3 < t2.length; s3++) {
                var a3 = t2[s3];
                if (U(S.transformHeader) && (a3 = S.transformHeader(a3, s3)), i3[a3]) {
                  for (var o3, h3 = i3[a3]; o3 = a3 + "_" + h3, h3++, r2.has(o3); ) ;
                  r2.add(o3), t2[s3] = o3, i3[a3]++, n3 = true, null === F && (F = {}), F[o3] = a3;
                } else i3[a3] = 1, t2[s3] = a3;
                r2.add(a3);
              }
              n3 && console.warn("Duplicate headers found and renamed.");
            }
            return { data: f2, errors: d2, meta: { delimiter: x, linebreak: I, aborted: M, truncated: !!e2, cursor: l2 + (u2 || 0), renamedHeaders: F } };
          }
          function R() {
            T(C()), f2 = [], d2 = [];
          }
        }, this.abort = function() {
          M = true;
        }, this.getCharIndex = function() {
          return z;
        };
      }
      function _(e) {
        var t = e.data, i2 = a[t.workerId], r = false;
        if (t.error) i2.userError(t.error, t.file);
        else if (t.results && t.results.data) {
          var n2 = { abort: function() {
            r = true, m(t.workerId, { data: [], errors: [], meta: { aborted: true } });
          }, pause: y, resume: y };
          if (U(i2.userStep)) {
            for (var s2 = 0; s2 < t.results.data.length && (i2.userStep({ data: t.results.data[s2], errors: t.results.errors, meta: t.results.meta }, n2), !r); s2++) ;
            delete t.results;
          } else U(i2.userChunk) && (i2.userChunk(t.results, n2, t.file), delete t.results);
        }
        t.finished && !r && m(t.workerId, t.results);
      }
      function m(e, t) {
        var i2 = a[e];
        U(i2.userComplete) && i2.userComplete(t), i2.terminate(), delete a[e];
      }
      function y() {
        throw new Error("Not implemented.");
      }
      function b(e) {
        if ("object" != typeof e || null === e) return e;
        var t = Array.isArray(e) ? [] : {};
        for (var i2 in e) t[i2] = b(e[i2]);
        return t;
      }
      function v(e, t) {
        return function() {
          e.apply(t, arguments);
        };
      }
      function U(e) {
        return "function" == typeof e;
      }
      return d && (f.onmessage = function(e) {
        var t = e.data;
        void 0 === w.WORKER_ID && t && (w.WORKER_ID = t.workerId);
        if ("string" == typeof t.input) f.postMessage({ workerId: w.WORKER_ID, results: w.parse(t.input, t.config), finished: true });
        else if (f.File && t.input instanceof File || t.input instanceof Object) {
          var i2 = w.parse(t.input, t.config);
          i2 && f.postMessage({ workerId: w.WORKER_ID, results: i2, finished: true });
        }
      }), (u.prototype = Object.create(h.prototype)).constructor = u, (c.prototype = Object.create(h.prototype)).constructor = c, (p.prototype = Object.create(p.prototype)).constructor = p, (g.prototype = Object.create(h.prototype)).constructor = g, w;
    });
  }
});
export default require_papaparse_min();
/*! Bundled license information:

papaparse/papaparse.min.js:
  (* @license
  Papa Parse
  v5.5.0
  https://github.com/mholt/PapaParse
  License: MIT
  *)
*/
//# sourceMappingURL=papaparse.js.map
